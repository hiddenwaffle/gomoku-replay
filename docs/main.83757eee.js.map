{"version":3,"sources":["elements.js","event-bus.js","model.js","move-selector.js","config.js","draw.js","reader.js","file-selector.js","main.js"],"names":["canvas","document","getElementById","ctx","getContext","fileUpload","rangeContainer","moveSelector","EventBus","handlers","Map","type","handler","get","set","push","event","eventBus","model","currentMoveIndex","moves","clear","addMove","move","currentMove","setCurrentMove","index","moveCount","length","init","register","resetMoveSelector","max","disabled","value","updateCurrentMove","fire","addEventListener","target","config","boardSize","SMU_RED","SMU_BLUE","draw","getCellSize","Math","floor","height","drawCellBoundary","row","col","cellSize","strokeRect","drawCell","fillStyle","beginPath","ellipse","PI","fill","strokeStyle","stroke","clearRect","width","entries","symbols","applyLines","lines","line","matchResults","match","split","includes","console","log","trim","error","parse","text","read","file","reader","FileReader","readyState","DONE","result","readAsText","handleFileSelect","files","resizeHandler","window","innerHeight","style"],"mappings":"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","file":"main.83757eee.js","sourceRoot":"../js","sourcesContent":["export const canvas = document.getElementById('canvas')\nexport const ctx = canvas.getContext('2d')\nexport const fileUpload = document.getElementById('file-upload')\nexport const rangeContainer = document.getElementById('range-container')\nexport const moveSelector = document.getElementById('move-selector')\n","class EventBus {\n  constructor() {\n    this.handlers = new Map()\n  }\n\n  register(type, handler) {\n    let handlers = this.handlers.get(type)\n    if (!handlers) {\n      handlers = []\n      this.handlers.set(type, handlers)\n    }\n    handlers.push(handler)\n  }\n\n  fire(event) {\n    // TODO: Prevent infinite fire() ?\n    const handlers = this.handlers.get(event)\n    if (handlers) {\n      for (let handler of handlers) {\n        handler(event)\n      }\n    }\n  }\n}\n\n// Initializion is here so that it occurs\n// before the init() in each module that\n// requires initialization.\nexport const eventBus = new EventBus()\n","// Each move state is itself an array of rows that look like:\n//  ['XXX',\n//   '..O',\n//   'XOX']\n// Moves are in order from first at [0] to last at [length-1].\n\nexport const model = {\n  // These assignments should match clear()\n  currentMoveIndex: null,\n  moves: []\n}\n\nexport function clear() {\n  // These assignments should match the initialization.\n  model.currentMoveIndex = null,\n  model.moves = []\n}\n\nexport function addMove(move) {\n  model.moves.push(move)\n}\n\nexport function currentMove() {\n  return model.moves[model.currentMoveIndex]\n}\n\nexport function setCurrentMove(index) {\n  model.currentMoveIndex = index\n}\n\nexport function moveCount() {\n  return model.moves.length\n}\n","import {moveSelector} from './elements'\nimport {eventBus} from './event-bus'\nimport {moveCount, setCurrentMove} from './model'\n\nexport function init() {\n  eventBus.register('file-read', resetMoveSelector)\n}\n\nfunction resetMoveSelector(event) {\n  const max = moveCount() - 1 // input range is inclusive\n  moveSelector.max = max\n  moveSelector.disabled = false\n  moveSelector.value = 0\n  updateCurrentMove(0)\n}\n\nfunction updateCurrentMove(value) {\n  setCurrentMove(value)\n  eventBus.fire('current-move-changed')\n}\n\nmoveSelector.addEventListener('input', (event) => {\n  updateCurrentMove(event.target.value)\n})\n","export const config = {\n  boardSize: 19\n}\n","import {config} from './config'\nimport {\n  canvas,\n  ctx\n} from './elements'\nimport {eventBus} from './event-bus'\nimport {model, currentMove} from './model'\n\nconst SMU_RED = '#cc0035'\nconst SMU_BLUE = '#354ca1'\n\nexport function init() {\n  eventBus.register('window-resized', draw)\n  eventBus.register('file-read', draw)\n  eventBus.register('current-move-changed', draw)\n}\n\n/**\n * Scale to the canvas height. Could scale to the width\n * as well but it doesn't need to be that fancy.\n */\nfunction getCellSize() {\n  return Math.floor(canvas.height / config.boardSize) - 1\n}\n\nfunction drawCellBoundary(row, col, cellSize) {\n  ctx.strokeRect(col * cellSize + 0.5,\n    row * cellSize + 0.5,\n    cellSize,\n    cellSize)\n}\n\nfunction drawCell(row, col, value, cellSize) {\n  if (value !== '.') {\n    ctx.fillStyle = value == 'X' ? SMU_RED : SMU_BLUE // else is O\n    ctx.beginPath()\n    ctx.ellipse(col * cellSize + (cellSize / 2),\n                row * cellSize + (cellSize / 2),\n                cellSize / 2 - 2,\n                cellSize / 2 - 2,\n                Math.PI / 4, 0, 2 * Math.PI)\n    ctx.fill()\n    ctx.strokeStyle = 'black'\n    ctx.ellipse(col * cellSize + (cellSize / 2),\n                row * cellSize + (cellSize / 2),\n                cellSize / 2 - 2,\n                cellSize / 2 - 2,\n                Math.PI / 4, 0, 2 * Math.PI)\n    ctx.stroke()\n  }\n}\n\nexport function draw() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height)\n  const cellSize = getCellSize()\n  ctx.strokeStyle = 'lightgray'\n  for (let row = 0; row < config.boardSize; row++) {\n    for (let col = 0; col < config.boardSize; col++) {\n      drawCellBoundary(row, col, cellSize)\n    }\n  }\n  if (model.currentMoveIndex >= 0) {\n    const move = currentMove()\n    if (move) {\n      for (let [row, symbols] of move.entries()) {\n        for (let col = 0; col < symbols.length; col++) {\n          const value = symbols[col]\n          drawCell(row, col, value, cellSize)\n        }\n      }\n    }\n  }\n}\n","import {eventBus} from './event-bus'\nimport {clear, addMove} from './model'\n\n/**\n * Testing Delete Me\n */\nexport function applyLines(lines) {\n  clear()\n  for (let line of lines) {\n    const matchResults = line.match(/ - DEBUG - ([X.O|]+)$/)\n    if (matchResults && matchResults.length == 2) {\n      addMove(matchResults[1].split('|')) // Use [1] because [0] is the full string.\n    } else if (line.includes('INFO - Game Board Size')) {\n      // Ignore\n    } else if (line.includes('INFO - Winner')) {\n      console.log('TODO: Handle this:', line)\n    } else if (line.trim() === '') {\n      // Ignore\n    } else {\n      console.error(`Unknown line: ${line}`)\n    }\n  }\n  eventBus.fire('file-read')\n}\n\n/**\n * There are three types of log lines output by the\n * play_one_on_one_v3.py file:\n *   1) The board size. This is ignored.\n *   2) A board state. This is parsed for display.\n *   3) Winner. This is parsed for display.\n */\nfunction parse(text) {\n  const lines = text.split(/\\r?\\n/)\n  applyLines(lines)\n}\n\n/**\n * Replace the model with the file contents.\n */\nexport function read(file) {\n  const reader = new FileReader()\n  reader.addEventListener('loadend', (event) => {\n    if (event.target.readyState === FileReader.DONE) {\n      parse(event.target.result)\n    }\n  })\n  reader.readAsText(file)\n}\n","import {\n  fileUpload,\n} from './elements'\nimport {read} from './reader'\n\nexport function init() {\n  fileUpload.addEventListener('change', handleFileSelect, false)\n}\n\n/**\n * Allow user to upload a log file.\n */\nfunction handleFileSelect(event) {\n  read(event.target.files[0])\n  // Workaround for if the user re-uploads the same file name.\n  // https://stackoverflow.com/a/34529205\n  fileUpload.value = ''\n}\n","import {init as controlsInit} from './move-selector'\nimport {init as drawInit} from './draw'\nimport {\n  canvas,\n  moveSelector\n} from './elements'\nimport {eventBus} from './event-bus'\nimport {init as fileSelectorInit} from './file-selector'\n\n// Specific initialization order:\ncontrolsInit()\ndrawInit()\nfileSelectorInit()\n\n/**\n * Ensure that the canvas is scaled to the height of the window.\n */\nfunction resizeHandler() {\n  canvas.width = canvas.height = Math.floor(window.innerHeight * 0.75)\n  moveSelector.style.width = `${canvas.width}px`\n  eventBus.fire('window-resized')\n}\nwindow.addEventListener('resize', resizeHandler, false)\nresizeHandler()\n"]}