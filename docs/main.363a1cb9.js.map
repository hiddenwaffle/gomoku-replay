{"version":3,"sources":["elements.js","event-bus.js","model.js","move-selector.js","config.js","draw.js","reader.js","file-selector.js","game-name.js","main.js"],"names":["canvas","document","getElementById","ctx","getContext","gameNameSpan","fileUpload","playButton","pauseButton","rangeContainer","moveSelector","EventBus","handlers","Map","type","handler","get","set","push","event","eventBus","model","gameName","currentMoveIndex","moves","clear","addMove","move","currentMove","setCurrentMove","index","moveCount","length","setGameName","value","DELAY","advancer","userDragging","init","register","resetAndPlay","addEventListener","play","pause","updateCurrentMove","target","max","disabled","fire","clearInterval","setInterval","parseInt","showPlayButton","visible","style","display","config","boardSize","SMU_RED","SMU_BLUE","draw","getCellSize","Math","floor","height","drawCellBoundary","row","col","cellSize","strokeRect","drawCell","fillStyle","beginPath","ellipse","PI","fill","strokeStyle","stroke","clearRect","width","entries","symbols","applyLines","lines","errors","line","matchResults","match","split","includes","trim","console","error","alert","parse","text","read","file","reader","FileReader","readyState","DONE","result","readAsText","handleFileSelect","files","displayGameName","innerText","resizeHandler","window","innerHeight"],"mappings":";AAOO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,QAAA,eAAA,QAAA,YAAA,QAAA,WAAA,QAAA,WAAA,QAAA,aAAA,QAAA,IAAA,QAAA,YAAA,EAPA,IAAMA,EAASC,SAASC,eAAe,UAOvC,QAAA,OAAA,EANA,IAAMC,EAAMH,EAAOI,WAAW,MAM9B,QAAA,IAAA,EALA,IAAMC,EAAeJ,SAASC,eAAe,aAK7C,QAAA,aAAA,EAJA,IAAMI,EAAaL,SAASC,eAAe,eAI3C,QAAA,WAAA,EAHA,IAAMK,EAAaN,SAASC,eAAe,eAG3C,QAAA,WAAA,EAFA,IAAMM,EAAcP,SAASC,eAAe,gBAE5C,QAAA,YAAA,EADA,IAAMO,EAAiBR,SAASC,eAAe,mBAC/C,QAAA,eAAA,EAAA,IAAMQ,EAAeT,SAASC,eAAe,iBAA7C,QAAA,aAAA;;ACqBA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,cAAA,EA5BDS,IAAAA,EAAAA,WACU,SAAA,IAAA,EAAA,KAAA,GACPC,KAAAA,SAAW,IAAIC,IA0BjB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,WAvBIC,MAAAA,SAAAA,EAAMC,GACTH,IAAAA,EAAW,KAAKA,SAASI,IAAIF,GAC5BF,IACHA,EAAW,GACNA,KAAAA,SAASK,IAAIH,EAAMF,IAE1BA,EAASM,KAAKH,KAiBX,CAAA,IAAA,OAdAI,MAAAA,SAAAA,GAEGP,IAAAA,EAAW,KAAKA,SAASI,IAAIG,GAC/BP,GAAAA,EAAU,CAAA,IAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IACQA,IAAAA,IAAU,EAAVA,EAAAA,EAAU,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,MAAA,GAAA,EAAA,EAC5BG,EAD4B,EAAA,OACpBI,IAFE,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,SAWX,EA5BDR,GA4BOS,EAAW,IAAIT,EAArB,QAAA,SAAA;;ACaN,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,MAAA,EAAA,QAAA,QAAA,EAAA,QAAA,YAAA,EAAA,QAAA,eAAA,EAAA,QAAA,UAAA,EAAA,QAAA,SAAA,EAAA,QAAA,YAAA,EAAA,QAAA,WAAA,EAnCM,IAAMU,EAAQ,CAEnBC,SAAU,KACVC,iBAAkB,KAClBC,MAAO,IAGF,SAASC,IAEdJ,EAAME,iBAAmB,KACzBF,EAAMG,MAAQ,GAGT,SAASE,EAAQC,GACtBN,EAAMG,MAAMN,KAAKS,GAGZ,SAASC,IACPP,OAAAA,EAAMG,MAAMH,EAAME,kBAGpB,SAASM,EAAeC,GAC7BT,EAAME,iBAAmBO,EAGpB,SAASC,IACPV,OAAAA,EAAMG,MAAMQ,OAGd,SAASV,IACPD,OAAAA,EAAMC,SAGR,SAASW,EAAYC,GAC1Bb,EAAMC,SAAWY,EAClB,QAAA,MAAA;;ACuCA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,KAAA,EAhFD,IAAA,EAAA,QAAA,cAKA,EAAA,QAAA,eACA,EAAA,QAAA,WAKMC,EAAQ,IAEVC,EAAW,KACXC,GAAe,EAEZ,SAASC,IACLC,EAAAA,SAAAA,SAAS,YAAaC,GACpBC,EAAAA,WAAAA,iBAAiB,QAASC,GACzBD,EAAAA,YAAAA,iBAAiB,QAASE,GACzBF,EAAAA,aAAAA,iBAAiB,SAAU,WACtCJ,GAAe,IAEJI,EAAAA,aAAAA,iBAAiB,QAAS,SAACtB,GACtCkB,GAAe,EACfO,EAAkBzB,EAAM0B,OAAOX,SAInC,SAASM,EAAarB,GACd2B,IAAAA,GAAM,EAAc,EAAA,aAAA,EACbA,EAAAA,aAAAA,IAAMA,EACNC,EAAAA,aAAAA,UAAW,EACXb,EAAAA,aAAAA,MAAQ,EACrBU,EAAkB,GAClBF,IAGF,SAASE,EAAkBV,IACVA,EAAAA,EAAAA,gBAAAA,GACNc,EAAAA,SAAAA,KAAK,wBAGhB,SAASN,IACHN,IACFa,cAAcb,GACdA,EAAW,MAGT1B,EAAawB,aAAAA,QAAUxB,EAAaoC,aAAAA,MACzBZ,EAAAA,aAAAA,MAAQ,EACrBU,EAAkBlC,EAAawB,aAAAA,QAEjCE,EAAWc,YAAY,WACjBb,IACSH,EAAAA,aAAAA,MAAQiB,SAASzC,EAAawB,aAAAA,OAAS,EAChDiB,SAASzC,EAAawB,aAAAA,QAAUiB,SAASzC,EAAaoC,aAAAA,OACxDG,cAAcb,GACdA,EAAW,KACXgB,GAAe,IAEjBR,EAAkBlC,EAAawB,aAAAA,SAC9BC,GACHiB,GAAe,GAGjB,SAAST,IACHP,IACFa,cAAcb,GACdA,EAAW,MAEbgB,GAAe,GAMjB,SAASA,EAAeC,GACXC,EAAAA,WAAAA,MAAMC,QAAUF,EAAU,SAAW,OACpCC,EAAAA,YAAAA,MAAMC,QAAUF,EAAU,OAAS;;AC/E1C,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,EAAA,IAAMG,EAAS,CACpBC,UAAW,IADN,QAAA,OAAA;;ACwEN,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,KAAA,EAAA,QAAA,KAAA,EAxED,IAAA,EAAA,QAAA,YACA,EAAA,QAAA,cAIA,EAAA,QAAA,eACA,EAAA,QAAA,WAkEC,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wDAAA,SAAA,EAAA,EAAA,GAAA,GAAA,OAAA,YAAA,OAAA,IAAA,uBAAA,OAAA,UAAA,SAAA,KAAA,GAAA,CAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAhED,IAAMC,EAAU,UACVC,EAAW,UAEV,SAASrB,IACLC,EAAAA,SAAAA,SAAS,iBAAkBqB,GAC3BrB,EAAAA,SAAAA,SAAS,YAAaqB,GACtBrB,EAAAA,SAAAA,SAAS,uBAAwBqB,GAO5C,SAASC,IACAC,OAAAA,KAAKC,MAAM/D,EAAOgE,OAAAA,OAASR,EAAOC,OAAAA,WAAa,EAGxD,SAASQ,EAAiBC,EAAKC,EAAKC,GAC9BC,EAAAA,IAAAA,WAAWF,EAAMC,EAAW,GAC9BF,EAAME,EAAW,GACjBA,EACAA,GAGJ,SAASE,EAASJ,EAAKC,EAAKjC,EAAOkC,GACnB,MAAVlC,IACEqC,EAAAA,IAAAA,UAAqB,KAATrC,EAAewB,EAAUC,EACrCa,EAAAA,IAAAA,YACAC,EAAAA,IAAAA,QAAQN,EAAMC,EAAYA,EAAW,EAC7BF,EAAME,EAAYA,EAAW,EAC7BA,EAAW,EAAI,EACfA,EAAW,EAAI,EACfN,KAAKY,GAAK,EAAG,EAAG,EAAIZ,KAAKY,IACjCC,EAAAA,IAAAA,OACAC,EAAAA,IAAAA,YAAc,QACdH,EAAAA,IAAAA,QAAQN,EAAMC,EAAYA,EAAW,EAC7BF,EAAME,EAAYA,EAAW,EAC7BA,EAAW,EAAI,EACfA,EAAW,EAAI,EACfN,KAAKY,GAAK,EAAG,EAAG,EAAIZ,KAAKY,IACjCG,EAAAA,IAAAA,UAID,SAASjB,IACVkB,EAAAA,IAAAA,UAAU,EAAG,EAAG9E,EAAO+E,OAAAA,MAAO/E,EAAOgE,OAAAA,QACnCI,IAAAA,EAAWP,IACbe,EAAAA,IAAAA,YAAc,YACb,IAAA,IAAIV,EAAM,EAAGA,EAAMV,EAAOC,OAAAA,UAAWS,IACnC,IAAA,IAAIC,EAAM,EAAGA,EAAMX,EAAOC,OAAAA,UAAWU,IACxCF,EAAiBC,EAAKC,EAAKC,GAG3B/C,GAAAA,EAAME,MAAAA,kBAAoB,EAAG,CACzBI,IAAAA,GAAO,EAAb,EAAA,eACIA,GAAAA,EAAM,CAAA,IAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IACmBA,IAAAA,IAAgB,EAAhBA,EAAAA,EAAKqD,UAAW,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,MAAA,GAAA,EACpC,IADoC,IAAA,EAAA,EAAA,EAAA,MAAA,GAAjCd,EAAiC,EAAA,GAA5Be,EAA4B,EAAA,GAChCd,EAAM,EAAGA,EAAMc,EAAQjD,OAAQmC,IAAO,CAE7CG,EAASJ,EAAKC,EADAc,EAAQd,GACIC,IAJtB,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA;;ACJb,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,EAAA,QAAA,KAAA,EA3DD,IAAA,EAAA,QAAA,eACA,EAAA,QAAA,WASO,SAASc,EAAWC,GACrBC,IAAAA,GAAS,GACb,EAAA,EAAA,SAFgC,IAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAGfD,IAAAA,IAAO,EAAPA,EAAAA,EAAO,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,MAAA,GAAA,EAAA,CAAfE,IAAAA,EAAe,EAAA,MAChBC,EAAeD,EAAKE,MAAM,yBAC5BD,GAAuC,GAAvBA,EAAatD,QACvBsD,EAAAA,EAAAA,SAAAA,EAAa,GAAGE,MAAM,MACrBH,EAAKI,SAAS,4BAEdJ,EAAKI,SAAS,mBACXJ,EAAAA,EAAAA,aAAAA,GACHrC,EAAAA,SAAAA,KAAK,sBACW,KAAhBqC,EAAKK,SAGdC,QAAQC,MAAuBP,iBAAAA,OAAAA,IAC/BD,GAAS,KAhBmB,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAmB5BA,GACFS,MAAM,wFAGC7C,EAAAA,SAAAA,KAAK,aAUhB,SAAS8C,EAAMC,GAEbb,EADca,EAAKP,MAAM,UAOpB,SAASQ,EAAKC,GACbC,IAAAA,EAAS,IAAIC,WACnBD,EAAOzD,iBAAiB,UAAW,SAACtB,GAC9BA,EAAM0B,OAAOuD,aAAeD,WAAWE,MACzCP,EAAM3E,EAAM0B,OAAOyD,UAGvBJ,EAAOK,WAAWN;;ACzCnB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,KAAA,EAjBD,IAAA,EAAA,QAAA,cAGA,EAAA,QAAA,YAEO,SAAS3D,IACHG,EAAAA,WAAAA,iBAAiB,SAAU+D,GAAkB,GAM1D,SAASA,EAAiBrF,IACnBA,EAAAA,EAAAA,MAAAA,EAAM0B,OAAO4D,MAAM,IAGbvE,EAAAA,WAAAA,MAAQ;;ACNpB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,KAAA,EAVD,IAAA,EAAA,QAAA,cACA,EAAA,QAAA,eACA,EAAA,QAAA,WAEO,SAASI,IACLC,EAAAA,SAAAA,SAAS,oBAAqBmE,GAGzC,SAASA,IACMC,EAAAA,aAAAA,WAAY,EAAzB,EAAA;;ACgBW,aAzBb,IAAA,EAAA,QAAA,mBACA,EAAA,QAAA,UACA,EAAA,QAAA,cAIA,EAAA,QAAA,eACA,EAAA,QAAA,mBACA,EAAA,QAAA,eAWA,SAASC,IACA7B,EAAAA,OAAAA,MAAQ/E,EAAOgE,OAAAA,OAASF,KAAKC,MAA2B,IAArB8C,OAAOC,aACpCxD,EAAAA,aAAAA,MAAMyB,MAAW/E,GAAAA,OAAAA,EAAO+E,OAAAA,MAArC,MACS/B,EAAAA,SAAAA,KAAK,mBAXhB,EAAA,EAAA,SACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,EAAA,EAAA,QAUA6D,OAAOpE,iBAAiB,SAAUmE,GAAe,GACjDA","file":"main.363a1cb9.js","sourceRoot":"../js","sourcesContent":["export const canvas = document.getElementById('canvas')\nexport const ctx = canvas.getContext('2d')\nexport const gameNameSpan = document.getElementById('game-name')\nexport const fileUpload = document.getElementById('file-upload')\nexport const playButton = document.getElementById('play-button')\nexport const pauseButton = document.getElementById('pause-button')\nexport const rangeContainer = document.getElementById('range-container')\nexport const moveSelector = document.getElementById('move-selector')\n","class EventBus {\n  constructor() {\n    this.handlers = new Map()\n  }\n\n  register(type, handler) {\n    let handlers = this.handlers.get(type)\n    if (!handlers) {\n      handlers = []\n      this.handlers.set(type, handlers)\n    }\n    handlers.push(handler)\n  }\n\n  fire(event) {\n    // TODO: Prevent infinite fire() ?\n    const handlers = this.handlers.get(event)\n    if (handlers) {\n      for (let handler of handlers) {\n        handler(event)\n      }\n    }\n  }\n}\n\n// Initializion is here so that it occurs\n// before the init() in each module that\n// requires initialization.\nexport const eventBus = new EventBus()\n","// Each move state is itself an array of rows that look like:\n//  ['XXX',\n//   '..O',\n//   'XOX']\n// Moves are in order from first at [0] to last at [length-1].\n\nexport const model = {\n  // These assignments should match clear()\n  gameName: null,\n  currentMoveIndex: null,\n  moves: []\n}\n\nexport function clear() {\n  // These assignments should match the initialization.\n  model.currentMoveIndex = null,\n  model.moves = []\n}\n\nexport function addMove(move) {\n  model.moves.push(move)\n}\n\nexport function currentMove() {\n  return model.moves[model.currentMoveIndex]\n}\n\nexport function setCurrentMove(index) {\n  model.currentMoveIndex = index\n}\n\nexport function moveCount() {\n  return model.moves.length\n}\n\nexport function gameName() {\n  return model.gameName\n}\n\nexport function setGameName(value) {\n  model.gameName = value\n}\n","import {\n  moveSelector,\n  playButton,\n  pauseButton\n} from './elements'\nimport {eventBus} from './event-bus'\nimport {\n  moveCount,\n  setCurrentMove\n} from './model'\n\nconst DELAY = 333 // ms\n\nlet advancer = null\nlet userDragging = false\n\nexport function init() {\n  eventBus.register('file-read', resetAndPlay)\n  playButton.addEventListener('click', play)\n  pauseButton.addEventListener('click', pause)\n  moveSelector.addEventListener('change', () => {\n    userDragging = false\n  })\n  moveSelector.addEventListener('input', (event) => {\n    userDragging = true\n    updateCurrentMove(event.target.value)\n  })\n}\n\nfunction resetAndPlay(event) {\n  const max = moveCount() - 1 // input range is inclusive\n  moveSelector.max = max\n  moveSelector.disabled = false\n  moveSelector.value = 0\n  updateCurrentMove(0)\n  play() // advancer will be reset in this function\n}\n\nfunction updateCurrentMove(value) {\n  setCurrentMove(value)\n  eventBus.fire('current-move-changed')\n}\n\nfunction play() {\n  if (advancer) {\n    clearInterval(advancer)\n    advancer = null\n  }\n  // Reset if at the end\n  if (moveSelector.value === moveSelector.max) {\n    moveSelector.value = 0\n    updateCurrentMove(moveSelector.value)\n  }\n  advancer = setInterval(() => {\n    if (userDragging) return // Try not to interfere with user\n    moveSelector.value = parseInt(moveSelector.value) + 1\n    if (parseInt(moveSelector.value) >= parseInt(moveSelector.max)) {\n      clearInterval(advancer)\n      advancer = null\n      showPlayButton(true)\n    }\n    updateCurrentMove(moveSelector.value)\n  }, DELAY)\n  showPlayButton(false)\n}\n\nfunction pause() {\n  if (advancer) {\n    clearInterval(advancer)\n    advancer = null\n  }\n  showPlayButton(true)\n}\n\n/**\n * Toggle between play and pause\n */\nfunction showPlayButton(visible) {\n  playButton.style.display = visible ? 'inline' : 'none'\n  pauseButton.style.display = visible ? 'none' : 'inline'\n}\n","export const config = {\n  boardSize: 19\n}\n","import {config} from './config'\nimport {\n  canvas,\n  ctx\n} from './elements'\nimport {eventBus} from './event-bus'\nimport {model, currentMove} from './model'\n\nconst SMU_RED = '#cc0035'\nconst SMU_BLUE = '#354ca1'\n\nexport function init() {\n  eventBus.register('window-resized', draw)\n  eventBus.register('file-read', draw)\n  eventBus.register('current-move-changed', draw)\n}\n\n/**\n * Scale to the canvas height. Could scale to the width\n * as well but it doesn't need to be that fancy.\n */\nfunction getCellSize() {\n  return Math.floor(canvas.height / config.boardSize) - 1\n}\n\nfunction drawCellBoundary(row, col, cellSize) {\n  ctx.strokeRect(col * cellSize + 0.5,\n    row * cellSize + 0.5,\n    cellSize,\n    cellSize)\n}\n\nfunction drawCell(row, col, value, cellSize) {\n  if (value !== '.') {\n    ctx.fillStyle = value == 'X' ? SMU_RED : SMU_BLUE // else is O\n    ctx.beginPath()\n    ctx.ellipse(col * cellSize + (cellSize / 2),\n                row * cellSize + (cellSize / 2),\n                cellSize / 2 - 2,\n                cellSize / 2 - 2,\n                Math.PI / 4, 0, 2 * Math.PI)\n    ctx.fill()\n    ctx.strokeStyle = 'black'\n    ctx.ellipse(col * cellSize + (cellSize / 2),\n                row * cellSize + (cellSize / 2),\n                cellSize / 2 - 2,\n                cellSize / 2 - 2,\n                Math.PI / 4, 0, 2 * Math.PI)\n    ctx.stroke()\n  }\n}\n\nexport function draw() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height)\n  const cellSize = getCellSize()\n  ctx.strokeStyle = 'lightgray'\n  for (let row = 0; row < config.boardSize; row++) {\n    for (let col = 0; col < config.boardSize; col++) {\n      drawCellBoundary(row, col, cellSize)\n    }\n  }\n  if (model.currentMoveIndex >= 0) {\n    const move = currentMove()\n    if (move) {\n      for (let [row, symbols] of move.entries()) {\n        for (let col = 0; col < symbols.length; col++) {\n          const value = symbols[col]\n          drawCell(row, col, value, cellSize)\n        }\n      }\n    }\n  }\n}\n","import {eventBus} from './event-bus'\nimport {\n  clear,\n  addMove,\n  setGameName\n} from './model'\n\n/**\n * Testing Delete Me\n */\nexport function applyLines(lines) {\n  let errors = false\n  clear()\n  for (let line of lines) {\n    const matchResults = line.match(/ - DEBUG - ([X.O|]+)$/)\n    if (matchResults && matchResults.length == 2) {\n      addMove(matchResults[1].split('|')) // Use [1] because [0] is the full string.\n    } else if (line.includes('INFO - Game Board Size')) {\n      // Ignore\n    } else if (line.includes('INFO - Winner')) {\n      setGameName(line)\n      eventBus.fire('game-name-updated')\n    } else if (line.trim() === '') {\n      // Ignore\n    } else {\n      console.error(`Unknown line: ${line}`)\n      errors = true\n    }\n  }\n  if (errors) {\n    alert('There were errors reading the file. This might cause the game ' +\n          'to render incorrectly.')\n  }\n  eventBus.fire('file-read')\n}\n\n/**\n * There are three types of log lines output by the\n * play_one_on_one_v3.py file:\n *   1) The board size. This is ignored.\n *   2) A board state. This is parsed for display.\n *   3) Winner. This is parsed for display.\n */\nfunction parse(text) {\n  const lines = text.split(/\\r?\\n/)\n  applyLines(lines)\n}\n\n/**\n * Replace the model with the file contents.\n */\nexport function read(file) {\n  const reader = new FileReader()\n  reader.addEventListener('loadend', (event) => {\n    if (event.target.readyState === FileReader.DONE) {\n      parse(event.target.result)\n    }\n  })\n  reader.readAsText(file)\n}\n","import {\n  fileUpload,\n} from './elements'\nimport {read} from './reader'\n\nexport function init() {\n  fileUpload.addEventListener('change', handleFileSelect, false)\n}\n\n/**\n * Allow user to upload a log file.\n */\nfunction handleFileSelect(event) {\n  read(event.target.files[0])\n  // Workaround for if the user re-uploads the same file name.\n  // https://stackoverflow.com/a/34529205\n  fileUpload.value = ''\n}\n","import {gameNameSpan} from './elements'\nimport {eventBus} from './event-bus'\nimport {gameName} from './model'\n\nexport function init() {\n  eventBus.register('game-name-updated', displayGameName)\n}\n\nfunction displayGameName() {\n  gameNameSpan.innerText = gameName()\n}\n","import {init as controlsInit} from './move-selector'\nimport {init as drawInit} from './draw'\nimport {\n  canvas,\n  moveSelector\n} from './elements'\nimport {eventBus} from './event-bus'\nimport {init as fileSelectorInit} from './file-selector'\nimport {init as gameNameInit} from './game-name'\n\n// Specific initialization order:\ncontrolsInit()\ndrawInit()\nfileSelectorInit()\ngameNameInit()\n\n/**\n * Ensure that the canvas is scaled to the height of the window.\n */\nfunction resizeHandler() {\n  canvas.width = canvas.height = Math.floor(window.innerHeight * 0.75)\n  moveSelector.style.width = `${canvas.width}px`\n  eventBus.fire('window-resized')\n}\nwindow.addEventListener('resize', resizeHandler, false)\nresizeHandler()\n"]}