{"version":3,"sources":["elements.js","event-bus.js","model.js","move-selector.js","draw.js","reader.js","file-selector.js","game-name.js","main.js"],"names":["SMU_RED","SMU_BLUE","canvas","document","getElementById","ctx","getContext","gameNameDiv","gameNameFancyDiv","blueNameSpan","redNameSpan","messageDiv","fileUpload","playButton","pauseButton","rangeContainer","moveSelector","EventBus","handlers","Map","type","handler","get","set","push","event","eventBus","model","gameName","currentMoveIndex","moves","boardSize","clear","addMove","move","currentMove","setCurrentMove","index","moveCount","length","setGameName","value","isEnd","recalculateBoardSize","DELAY","advancer","userDragging","init","register","resetAndPlay","keyLeft","keyRight","keyPause","addEventListener","play","pause","updateCurrentMove","target","code","preventDefault","max","disabled","fire","increment","delta","parseInt","clearInterval","showPlayButton","setInterval","visible","style","display","draw","getCellSize","Math","floor","height","drawCellBoundary","row","col","cellSize","strokeRect","drawCell","fillStyle","beginPath","ellipse","PI","fill","strokeStyle","stroke","clearRect","width","entries","symbols","applyLines","lines","errors","line","matchResults","match","split","includes","trim","console","error","alert","parse","text","read","file","reader","FileReader","readyState","DONE","result","readAsText","handleFileSelect","files","reset","displayGameName","sliderChanged","setInnerTexts","red","blue","winner","numMoves","elapsed","message","color","innerText","resizeHandler","window","innerHeight"],"mappings":"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","file":"main.5848022b.js","sourceRoot":"../js","sourcesContent":["export const SMU_RED = '#cc0035'\nexport const SMU_BLUE = '#354ca1'\n\nexport const canvas = document.getElementById('canvas')\nexport const ctx = canvas.getContext('2d')\nexport const gameNameDiv = document.getElementById('game-name')\nexport const gameNameFancyDiv = document.getElementById('game-name-fancy')\nexport const blueNameSpan = document.getElementById('blue-name')\nexport const redNameSpan = document.getElementById('red-name')\nexport const messageDiv = document.getElementById('message')\nexport const fileUpload = document.getElementById('file-upload')\nexport const playButton = document.getElementById('play-button')\nexport const pauseButton = document.getElementById('pause-button')\nexport const rangeContainer = document.getElementById('range-container')\nexport const moveSelector = document.getElementById('move-selector')\n","class EventBus {\n  constructor() {\n    this.handlers = new Map()\n  }\n\n  register(type, handler) {\n    let handlers = this.handlers.get(type)\n    if (!handlers) {\n      handlers = []\n      this.handlers.set(type, handlers)\n    }\n    handlers.push(handler)\n  }\n\n  fire(event) {\n    // TODO: Prevent infinite fire() ?\n    const handlers = this.handlers.get(event)\n    if (handlers) {\n      for (let handler of handlers) {\n        handler(event)\n      }\n    }\n  }\n}\n\n// Initializion is here so that it occurs\n// before the init() in each module that\n// requires initialization.\nexport const eventBus = new EventBus()\n","// Each move state is itself an array of rows that look like:\n//  ['XXX',\n//   '..O',\n//   'XOX']\n// Moves are in order from first at [0] to last at [length-1].\n\nexport const model = {\n  // These assignments should match clear()\n  gameName: null,\n  currentMoveIndex: null,\n  moves: [],\n  boardSize: 19\n}\n\nexport function clear() {\n  // These assignments should match the initialization.\n  model.currentMoveIndex = null,\n  model.moves = []\n}\n\nexport function addMove(move) {\n  model.moves.push(move)\n}\n\nexport function currentMove() {\n  return model.moves[model.currentMoveIndex]\n}\n\nexport function setCurrentMove(index) {\n  model.currentMoveIndex = index\n}\n\nexport function moveCount() {\n  return model.moves.length\n}\n\nexport function gameName() {\n  return model.gameName\n}\n\nexport function setGameName(value) {\n  model.gameName = value\n}\n\nexport function isEnd() {\n  return model.currentMoveIndex >= model.moves.length - 1\n}\n\nexport function recalculateBoardSize() {\n  let boardSize = 19\n  if (model.moves.length > 0) {\n    boardSize = model.moves[0].length\n  }\n  model.boardSize = boardSize\n}\n","import {\n  moveSelector,\n  playButton,\n  pauseButton\n} from './elements'\nimport {eventBus} from './event-bus'\nimport {\n  moveCount,\n  setCurrentMove\n} from './model'\n\nconst DELAY = 333 // ms\n\nlet advancer = null\nlet userDragging = false\n\nexport function init() {\n  eventBus.register('file-read', resetAndPlay)\n  eventBus.register('key-left', keyLeft)\n  eventBus.register('key-right', keyRight)\n  eventBus.register('key-pause', keyPause)\n  playButton.addEventListener('click', play)\n  pauseButton.addEventListener('click', pause)\n  moveSelector.addEventListener('change', () => {\n    userDragging = false\n  })\n  moveSelector.addEventListener('input', (event) => {\n    userDragging = true\n    updateCurrentMove(event.target.value)\n  })\n  moveSelector.addEventListener('keydown', (event) => {\n    // In case the user hits left/right while the focus is\n    // on the selector itself -- do not double increment.\n    if (event.code === 'ArrowLeft' ||\n        event.code === 'ArrowRight') {\n      event.preventDefault()\n    }\n  })\n}\n\nfunction resetAndPlay(event) {\n  const max = moveCount() - 1 // input range is inclusive\n  moveSelector.max = max\n  moveSelector.disabled = false\n  moveSelector.value = 0\n  updateCurrentMove(0)\n  play() // advancer will be reset in this function\n}\n\nfunction updateCurrentMove(value) {\n  setCurrentMove(value)\n  eventBus.fire('current-move-changed')\n}\n\n/**\n * Also does decrements.\n */\nfunction increment(delta) {\n  if (userDragging) return // Try not to interfere with user\n  moveSelector.value = parseInt(moveSelector.value) + delta\n  if (parseInt(moveSelector.value) >= parseInt(moveSelector.max)) {\n    clearInterval(advancer)\n    advancer = null\n    showPlayButton(true)\n  }\n  updateCurrentMove(moveSelector.value)\n}\n\nfunction play() {\n  if (advancer) {\n    clearInterval(advancer)\n    advancer = null\n  }\n  // Reset if at the end\n  if (moveSelector.value === moveSelector.max) {\n    moveSelector.value = 0\n    updateCurrentMove(moveSelector.value)\n  }\n  advancer = setInterval(() => { increment(1) }, DELAY)\n  showPlayButton(false)\n}\n\n/**\n * It is ok for this function to be called multiple times in a row.\n */\nfunction pause() {\n  if (advancer) {\n    clearInterval(advancer)\n    advancer = null\n  }\n  showPlayButton(true)\n}\n\n/**\n * Toggle between play and pause\n */\nfunction showPlayButton(visible) {\n  playButton.style.display = visible ? 'inline' : 'none'\n  pauseButton.style.display = visible ? 'none' : 'inline'\n}\n\nfunction keyLeft() {\n  if (!moveSelector.disabled) {\n    increment(-1)\n  }\n}\n\nfunction keyRight() {\n  if (!moveSelector.disabled) {\n    increment(1)\n  }\n}\n\nfunction keyPause() {\n  if (!moveSelector.disabled) {\n    if (advancer) {\n      pause()\n    } else {\n      play()\n    }\n  }\n}\n","import {\n  canvas,\n  ctx,\n  SMU_BLUE,\n  SMU_RED\n} from './elements'\nimport {eventBus} from './event-bus'\nimport {model, currentMove} from './model'\n\nexport function init() {\n  eventBus.register('window-resized', draw)\n  eventBus.register('file-read', draw)\n  eventBus.register('current-move-changed', draw)\n}\n\n/**\n * Scale to the canvas height. Could scale to the width\n * as well but it doesn't need to be that fancy.\n */\nfunction getCellSize() {\n  return Math.floor(canvas.height / model.boardSize) - 1\n}\n\nfunction drawCellBoundary(row, col, cellSize) {\n  ctx.strokeRect(col * cellSize + 0.5,\n    row * cellSize + 0.5,\n    cellSize,\n    cellSize)\n}\n\nfunction drawCell(row, col, value, cellSize) {\n  if (value !== '.') {\n    ctx.fillStyle = value == 'X' ? SMU_RED : SMU_BLUE // else is O\n    ctx.beginPath()\n    ctx.ellipse(col * cellSize + (cellSize / 2),\n                row * cellSize + (cellSize / 2),\n                cellSize / 2 - 2,\n                cellSize / 2 - 2,\n                Math.PI / 4, 0, 2 * Math.PI)\n    ctx.fill()\n    ctx.strokeStyle = 'black'\n    ctx.ellipse(col * cellSize + (cellSize / 2),\n                row * cellSize + (cellSize / 2),\n                cellSize / 2 - 2,\n                cellSize / 2 - 2,\n                Math.PI / 4, 0, 2 * Math.PI)\n    ctx.stroke()\n  }\n}\n\nexport function draw() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height)\n  const cellSize = getCellSize()\n  ctx.strokeStyle = 'lightgray'\n  for (let row = 0; row < model.boardSize; row++) {\n    for (let col = 0; col < model.boardSize; col++) {\n      drawCellBoundary(row, col, cellSize)\n    }\n  }\n  if (model.currentMoveIndex >= 0) {\n    const move = currentMove()\n    if (move) {\n      for (let [row, symbols] of move.entries()) {\n        for (let col = 0; col < symbols.length; col++) {\n          const value = symbols[col]\n          drawCell(row, col, value, cellSize)\n        }\n      }\n    }\n  }\n}\n","import {eventBus} from './event-bus'\nimport {\n  clear,\n  addMove,\n  setGameName,\n  recalculateBoardSize\n} from './model'\n\n/**\n * Testing Delete Me\n */\nexport function applyLines(lines) {\n  let errors = false\n  clear()\n  for (let line of lines) {\n    const matchResults = line.match(/ - DEBUG - ([X.O|]+)$/)\n    if (matchResults && matchResults.length == 2) {\n      addMove(matchResults[1].split('|')) // Use [1] because [0] is the full string.\n    } else if (line.includes('INFO - Game Board Size')) {\n      // Ignore\n    } else if (line.includes('INFO - Winner')) {\n      setGameName(line)\n      eventBus.fire('game-name-updated')\n    } else if (line.trim() === '') {\n      // Ignore\n    } else {\n      console.error(`Unknown line: ${line}`)\n      errors = true\n    }\n  }\n  if (errors) {\n    alert('There were errors reading the file. This might cause the game ' +\n          'to render incorrectly.')\n  }\n  recalculateBoardSize() // In case it is not 19x19\n  eventBus.fire('file-read')\n}\n\n/**\n * There are three types of log lines output by the\n * play_one_on_one_v3.py file:\n *   1) The board size. This is ignored.\n *   2) A board state. This is parsed for display.\n *   3) Winner. This is parsed for display.\n */\nfunction parse(text) {\n  const lines = text.split(/\\r?\\n/)\n  applyLines(lines)\n}\n\n/**\n * Replace the model with the file contents.\n */\nexport function read(file) {\n  const reader = new FileReader()\n  reader.addEventListener('loadend', (event) => {\n    eventBus.fire('file-opened')\n    if (event.target.readyState === FileReader.DONE) {\n      parse(event.target.result)\n    }\n  })\n  reader.readAsText(file)\n}\n","import {\n  fileUpload,\n} from './elements'\nimport {read} from './reader'\n\nexport function init() {\n  fileUpload.addEventListener('change', handleFileSelect, false)\n}\n\n/**\n * Allow user to upload a log file.\n */\nfunction handleFileSelect(event) {\n  read(event.target.files[0])\n  // Workaround for if the user re-uploads the same file name.\n  // https://stackoverflow.com/a/34529205\n  fileUpload.value = ''\n}\n","import {\n  SMU_RED,\n  SMU_BLUE,\n  gameNameDiv,\n  gameNameFancyDiv,\n  redNameSpan,\n  blueNameSpan,\n  messageDiv\n} from './elements'\nimport {eventBus} from './event-bus'\nimport {\n  gameName as getGameName,\n  isEnd\n} from './model'\n\nexport function init() {\n  eventBus.register('file-opened', reset)\n  eventBus.register('game-name-updated', displayGameName)\n  eventBus.register('current-move-changed', sliderChanged)\n}\n\nfunction reset() {\n  setInnerTexts('', '', '')\n}\n\n/**\n * Example log line:\n * 2020-03-07 11:23:10,913 - bob.v.alice - INFO - Winner: 1 in 15 moves time= 0.650 secs\n * Assumptions:\n *  - 'bob' is red/X\n *  - 'alice' is blue/O\n */\nfunction parse(line) {\n  const matchResults = line.match(/^(.*) (.*) - (.*)\\.v\\.(.*) - INFO - Winner: (.*) in (.*) moves time= (.*)$/)\n  if (!matchResults || matchResults.length !== 8) {\n    return ['', '', '', '']\n  }\n  // Remember [0] is the whole string again\n  //          [1] is just the log date\n  //          [2] is just the log time\n  const red = matchResults[3]\n  const blue = matchResults[4]\n  const winner = matchResults[5] // 1, -1, or 0\n  const numMoves = matchResults[6]\n  const elapsed = matchResults[7]\n  let message\n  if (winner === '1') {\n    message = `${red} wins in ${numMoves} moves over ${elapsed}`\n  } else if (winner === '-1') {\n    message = `${blue} wins in ${numMoves} moves over ${elapsed}`\n  } else {\n    message = `TIE - ${numMoves} moves over ${elapsed}`\n  }\n  return [red, blue, message, winner]\n}\n\nfunction displayGameName() {\n  const line = getGameName()\n  const [red, blue, message, winner] = parse(line)\n  gameNameDiv.style.display = 'none'\n  gameNameFancyDiv.style.display = 'block'\n  if (winner === '1') {\n    messageDiv.style.color = SMU_RED\n  } else if (winner === '-1') {\n    messageDiv.style.color = SMU_BLUE\n  } else {\n    messageDiv.style.color = '#333333'\n  }\n  setInnerTexts(red, blue, message)\n}\n\nfunction setInnerTexts(red, blue, message) {\n  redNameSpan.innerText = red\n  blueNameSpan.innerText = blue\n  messageDiv.innerText = message\n}\n\nfunction sliderChanged() {\n  if (isEnd()) {\n    messageDiv.style.display = 'block'\n  } else {\n    messageDiv.style.display = 'none'\n  }\n}\n","import {init as controlsInit} from './move-selector'\nimport {init as drawInit} from './draw'\nimport {\n  canvas,\n  moveSelector\n} from './elements'\nimport {eventBus} from './event-bus'\nimport {init as fileSelectorInit} from './file-selector'\nimport {init as gameNameInit} from './game-name'\n\n// Specific initialization order:\ncontrolsInit()\ndrawInit()\nfileSelectorInit()\ngameNameInit()\n\n/**\n * Ensure that the canvas is scaled to the height of the window.\n */\nfunction resizeHandler() {\n  canvas.width = canvas.height = Math.floor(window.innerHeight * 0.70)\n  moveSelector.style.width = `${canvas.width}px`\n  eventBus.fire('window-resized')\n}\nwindow.addEventListener('resize', resizeHandler, false)\nresizeHandler()\n\n/**\n * Handle keyboard events at the top-level.\n */\nwindow.addEventListener('keydown', (event) => {\n  if (event.code === 'ArrowLeft') {\n    eventBus.fire('key-left')\n  } else if (event.code === 'ArrowRight') {\n    eventBus.fire('key-right')\n  } else if (event.code === 'Space') {\n    eventBus.fire('key-pause')\n  }\n})\n"]}